//Builtin plugins
//apply plugin: 'com.gradle.enterprise'
apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'project-report'

//External plugins
apply plugin: 'com.fizzpod.info'
apply plugin: 'com.fizzpod.sweeney'
apply plugin: 'com.fizzpod.lefthook'
apply plugin: 'com.github.ben-manes.versions'
//apply plugin: 'com.github.spotbugs'
//apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.diffplug.spotless'

def isCI = System.getenv('CI') != null



develocity {
    buildScan {
        termsOfUseUrl = 'https://gradle.com/help/legal-terms-of-use'    
        termsOfUseAgree = 'yes'            
         publishing.onlyIf { isCI }                      
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.release = 17
}

compileGroovy {
    options.release = 17
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = "https://plugins.gradle.org/m2/"
  }
}

dependencies {
	api gradleApi()
	implementation localGroovy()
}

sweeney {
    enforce 'jdk:[17,)'
    enforce 'gradle:[8.0,)'
}

/*
spotbugs {
    ignoreFailures = true
    showStackTraces = true
    showProgress = true
    reportsDir = file("$buildDir/spotbugs")
}
*/

// configure error prone
/*
tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        option("disableWarningsInGeneratedCode", "true")
    }
}
*/


lefthook {
  options = {
    autoinstall = true
  }
  config = {
    [
      "assert_lefthook_installed": true,
      "pre-commit": [
        "follow": true,
        "commands": [
          "spotless": [
            "glob": "*",
            "run": "./gradlew spotlessCheck"
          ],
          "osv": [
            "glob": "*.{groovy,java,gradle}",
            "run": "./gradlew osvInstall osvLockAndScan"
          ],
          "test": [
            "glob": "*.{groovy,java}",
            "run": "./gradlew test"
          ]
        ]
      ],
      "commit-msg": [
        "follow": true,
        "scripts": [
          {install "https://raw.githubusercontent.com/joaobsjunior/sh-conventional-commits/16dbdae09db941718750db62d4fdbd737da7784e/commit-msg"}: [
            "runner": "bash"
          ]
        ]
      ]
    ]
  }
}

dependencyLocking {
    lockAllConfigurations()
}

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

tasks.register('resolveAndLockAll') {
    notCompatibleWithConfigurationCache("Filters configurations at execution time")
    doFirst {
        assert gradle.startParameter.writeDependencyLocks : "$path must be run from the command line with the `--write-locks` flag"
    }
    doLast {
        configurations.findAll {
            // Add any custom filtering on the configurations to be resolved
            it.canBeResolved
        }.each { it.resolve() }
    }
}


spotless {
  ratchetFrom 'origin/develop'
  java {
    target 'buildSrc/**/*.java', 'src/main/java/**/*.java'
    importOrder()

    removeUnusedImports()

    cleanthat()

    googleJavaFormat()

    formatAnnotations()

    licenseHeader '/* (C) $YEAR */\n/* SPDX-License-Identifier: Apache-2.0 */'
  }
  
  groovy {
    target 'buildSrc/**/*.groovy', 'src/**/*.groovy'
    importOrder()
    removeSemicolons()
    //greclipse generally doesn't work so don't apply it
//    greclipse()
    licenseHeader '/* (C) $YEAR */\n/* SPDX-License-Identifier: Apache-2.0 */'
  }
  flexmark {
    target '*.md', 'src/**/*.md', 'buildSrc/**/*.md'
    flexmark() 
  }
}